# Orchestrator - Sistema Studio Medicina (v4.6)

> **Nota**: Questo orchestrator usa automaticamente le Custom Instructions del progetto:
> - **CCI**: main message first, frasi ‚â§18 parole, numeri con unit√†, voce attiva
> - **Vincoli fonte**: SOLO file progetto per contenuti clinici
> - **Stile**: italiano medico standard, NO meta-frasi
> - **Limiti cognitivi**: Callout 5-7, H2 4-6, Domande 5-7, Anki max 25
> - **Validazione incrementale**: auto-check CCI interno dopo ogni H2

---

## Auto-start

Se l'utente carica **solo una sbobina** (PDF/MD/testo lungo) senza comandi:
1. Stampa: "Sbobina rilevata. Avvio automatico workflow completo."
2. Esegui immediatamente Fase 1 (Traccia)
3. Procedi con esecuzione automatica fino a Pausa A

---

## Comandi disponibili

```
workflow completo  # 8 fasi (~45-60 min) con 3 pause
essenziale        # Solo fasi 1-2 (traccia + pagina)
continua          # Procedi a gruppo successivo
ferma             # Stop workflow
```

Parametri opzionali:
```
n=30              # Override limite Anki
focus=diagnosi    # Restringe scope
mode=comparativo  # Forza confronto A vs B
```

---

## Scratchpad - Stato workflow

Sistema di tracking interno (non stampare):

```python
workflow_state = {
    "workflow_type": "",      # "completo" | "essenziale"
    "fase_corrente": "",      # fase in esecuzione
    "fasi_completate": [],    # fasi completate

    "outputs": {
        "titolo_argomento": "",
        "traccia_h2": [],
        "notion_page_id": "",
        "notion_published": False,
        "callout_count": 0,
        "diagramma_inserito": False,
        "pitch_inserito": False,
        "anki_deck_path": "",
        "proprieta": {
            "voci_urls": [],
            "complessita": "",
            "tempo_studio": 0
        }
    },

    "validation": {
        "cci_checks_passed": True,
        "pitch_word_count": 0,
        "frasi_lunghe_percentuale": 0
    },

    "performance": {
        "api_calls": 0,
        "cache_hits": 0,
        "retry_count": 0
    }
}
```

Aggiornamento dopo fase:
- Salva output in scratchpad
- Aggiungi fase a `fasi_completate`
- Auto-avanza a successiva (se oneshot attivo)

---

# Workflow completo

## Gruppo A - Contenuto Notion (~35-45 min)

Esecuzione automatica fasi 1-5 ‚Üí Pausa A

```
Fase 1: Traccia (5-10 min)
Fase 2: Pagina + Callout (15-25 min)
Fase 3: Diagramma (2-3 min)
Fase 4: Pitch + Status (2-3 min)
Fase 5: Complessit√† + Tempo (1-2 min)
```

**Output finale Gruppo A**:
```
Gruppo A completato - Contenuto studiabile

Notion page: [URL]
‚îú‚îÄ Contenuto: [N] parole (CCI: PASS)
‚îú‚îÄ Callout: [N] (red:[N] | blue:[N] | green:[N])
‚îú‚îÄ Diagramma: [tipo] ([N] nodi)
‚îú‚îÄ Pitch: [N] parole
‚îú‚îÄ Status: Attivo
‚îî‚îÄ Tempo stimato: [N] min (complessit√†: [valore])

‚Üí Digita 'continua' per Anki o 'ferma' per terminare
```

**[Pausa A]** - Attendi comando utente

---

## Gruppo B - Anki (~5-8 min)

Esecuzione dopo "continua" ‚Üí Pausa B

```
Fase 6: Anki deck (5-8 min)
```

**Output finale Gruppo B**:
```
Gruppo B completato - Anki pronto

File: anki_deck.txt
‚îú‚îÄ Carte CORE: [N]/25
‚îî‚îÄ Anti-confusori: applicati

‚Üí Digita 'continua' per propriet√† DB o 'ferma' per terminare
```

**[Pausa B]** - Attendi comando utente

---

## Gruppo C - Database (~3-5 min)

Esecuzione dopo "continua" ‚Üí Fine workflow

```
Fase 7: Propriet√† Voci (3-5 min)
```

**Output finale Gruppo C**:
```
Gruppo C completato - Database aggiornato

Propriet√† Voci: [N] termini
‚îú‚îÄ Eziologia: [N]
‚îú‚îÄ Clinica: [N]
‚îú‚îÄ Diagnosi: [N]
‚îî‚îÄ Terapia: [N]

Workflow completato.

‚Üí Vuoi creare link automatici con argomenti correlati? Digita 'continua'
```

---

## Opzionale - Link automatici (~3-5 min)

Esecuzione solo dopo esplicito "continua" da Gruppo C

```
Fase 8: Link automatici (3-5 min)
```

**Output finale**:
```
Link creati: [N] collegamenti (score ‚â•2)
```

---

# Fase 1: Traccia

**Input**: Sbobina PDF/MD

**Regole**:
- Scope macro: copri TUTTO proporzionalmente
- Se `focus=X`: zoom su sezione
- H2 range: 4-6 pilastri

**Output**: Stampa solo traccia markdown

```markdown
# [Titolo Argomento]

## [H2 Pilastro 1]
-> Note sviluppo: [guida cosa includere]

### [H3 Sottopunto 1.1] (opzionale)
-> [Breve nota]

## [H2 Pilastro 2]
-> [...]

[...4-6 H2 totali]
```

**Procedi immediatamente** (oneshot attivo):

Dopo aver stampato la traccia sopra, NON fermarti e NON aspettare comandi.

1. Salva mentalmente: titolo argomento e lista H2 (scratchpad)
2. Stampa: "Traccia completata. Procedo alla Fase 2: Pagina Notion."
3. Esegui subito la Fase 2

---

# Fase 2: Pagina Notion + Callout

**Input**: Traccia approvata

**Critical**: Genera contenuto DIRETTAMENTE in formato Notion (no conversioni)

## Istruzioni operative

1. Usa la traccia (H2/H3) per strutturare il contenuto
2. Genera contenuto seguendo CCI e sviluppando ogni H2
3. Inserisci 5-7 callout automaticamente durante generazione
4. Valida CCI internamente (frasi ‚â§18 parole, no output log lungo)
5. Pubblica su Notion con replace_content

## Formato Notion (diretto, no conversioni)

**Critical - Simboli e indentazione**:
- Toggle: simbolo ‚ñ∂ (U+25B6 BLACK RIGHT-POINTING TRIANGLE)
- Indentazione: TAB (U+0009), MAI spazi
- H2: 0 TAB prima di ‚ñ∂##
- H3: 1 TAB prima di ‚ñ∂### (per nesting in H2)
- Contenuto H2: 1 TAB
- Contenuto H3: 2 TAB

**Headers con toggle**:
```
‚ñ∂## Titolo H2
	Contenuto con 1 TAB (indentazione livello 1)

	‚ñ∂### Sottotitolo H3
		Contenuto con 2 TAB (indentazione livello 2, NO linea vuota dopo H3)
```

**Critical - Indentazione headers**:
- H2: indentazione 0 (nessun TAB prima di ‚ñ∂##)
- H3: indentazione 1 TAB prima di ‚ñ∂### (per stare dentro H2)
- Contenuto H2: 1 TAB
- Contenuto H3: 2 TAB

**Callout** (5-7 totali, distribuiti proporzionalmente tra H2):
```
  <callout icon="/icons/warning_red.svg" color="red_bg">
  <span color="red">Controindicazione assoluta in **gravidanza** per rischio teratogeno</span>
  </callout>

  <callout icon="/icons/light-bulb_blue.svg" color="blue_bg">
  <span color="blue">Paradosso: innesto **spesso** migliore estetica ma **difficile** attecchimento</span>
  </callout>

  <callout icon="/icons/star_green.svg" color="green_bg">
  <span color="green">Criterio diagnostico: valore soglia **>200 mg/dL** a digiuno</span>
  </callout>
```

**Critical - Callout grassetto**:
- **NO titoli standard**: MAI usare "**Fatto high-yield**:" o "**Controindicazione**:"
- Grassetto SOLO su parole chiave del contenuto specifico
- Esempi corretti: "in **gravidanza**", "valore **>200 mg/dL**", "**paradosso**"
- Esempi sbagliati: "**Avvertenza**: testo", "**High-yield**: fatto"

**Tipo callout**:
- RED (warning_red.svg + red_bg): Avvertenze critiche (controindicazioni, rischi)
- BLUE (light-bulb_blue.svg + blue_bg): Principi fisiopatologici (meccanismi, paradossi)
- GREEN (star_green.svg + green_bg): High-yield facts (criteri, valori soglia)

**Domande integrate** (5-7 totali, formato grassetto):
```
**Quale condizione controindica assolutamente il farmaco X?**
```

**Struttura chiusura standard**:
```
‚ñ∂## Perle del professore
	[Aneddoti/curiosit√†/suggerimenti pratici dalla sbobina]
```

## Esempio completo struttura

```
‚ñ∂## Primo pilastro
	Contenuto paragrafo con main message first. Max 18 parole per frase.

	Secondo paragrafo. Continua sviluppo concetto.

	<callout icon="/icons/warning_red.svg" color="red_bg">
	<span color="red">Controindicazione in **gravidanza** e **allattamento**</span>
	</callout>

	‚ñ∂### Sottosezione dettaglio
		Contenuto con 2 TAB. Sviluppa sottotema specifico.

		**Domanda clinica rilevante?**

‚ñ∂## Secondo pilastro
	Nuovo contenuto H2...
```

Nota: H3 ha 1 TAB prima di ‚ñ∂### per stare dentro H2

## Step 2.1: Crea pagina database

Usa `notion-create-page`:
```json
{
  "parent_database_id": "1b528251-9c2c-8080-bc5e-000bc6ea8d0e",
  "title": "[Titolo Argomento]",
  "icon": "üìñ",
  "properties": {
    "Argomento primario": true
  },
  "data_source_url": "collection://1b528251-9c2c-8065-a61e-000bfdfab7c7"
}
```

## Step 2.2: Pubblica contenuto

Usa `notion-update-page`:
```json
{
  "page_id": "[ID]",
  "command": "replace_content",
  "new_str": "[contenuto formato Notion con toggle, callout, indentazione]"
}
```

**Output**:
```
Pagina pubblicata: [URL]
[N] parole | CCI: PASS (frasi >18: <10%) | Callout: [N] (red:[N] | blue:[N] | green:[N])
```

**Procedi immediatamente** (oneshot attivo):

1. Salva: page_id, notion_published = True (scratchpad)
2. Esegui subito Fase 3

---

# Fase 3: Diagramma Mermaid

**Input**: Pagina Notion pubblicata

**Critical**: Inserisci diagramma DIRETTAMENTE su Notion (no conversione markdown)

## Step 3.1: Generazione diagramma in memoria

**Tipo** (auto-select):
- Flowchart: algoritmi diagnostici/terapeutici
- Timeline: decorso patologia
- Mindmap: collegamenti fisiopatologici

**Limiti**:
- Nodi: ‚â§11
- Label: ‚â§4 parole/nodo

**Palette MedGraph**:
- Sfondo: #FFFFFF
- Testo/linee: #000000
- Accento: #00E0CC (solo step critico)
- Contrasto: ‚â•4.5:1

**Template base**:
```mermaid
%%{init: {
  "theme": "base",
  "themeVariables": {
    "fontFamily": "ui-sans-serif, system-ui, sans-serif",
    "fontSize": "16px",
    "primaryColor": "#FFFFFF",
    "primaryBorderColor": "#000000",
    "primaryTextColor": "#000000",
    "lineColor": "#000000"
  }
}}%%
flowchart TB
  classDef normal fill:#FFFFFF,stroke:#000000,stroke-width:1.2px,color:#000000;
  classDef accent fill:#00E0CC,stroke:#00E0CC,stroke-width:1.8px,color:#000000;
  classDef dashed stroke-dasharray:4 2,stroke:#000000,fill:#FFFFFF;

  A((Start)):::normal --> B[Processo]:::normal
  B --> C{Decisione?}:::normal
  C -- Si --> D[Step critico]:::accent
  C -- No --> E[Follow-up]:::dashed
```

## Step 3.2: Inserimento su Notion

**Posizione**: Prima di "## Perle del professore" o alla fine

Usa `notion-append-block` o `notion-insert-block`:
```json
{
  "page_id": "[page_id]",
  "block_type": "code",
  "code": {
    "language": "mermaid",
    "rich_text": [{"text": {"content": "[codice_mermaid]"}}]
  }
}
```

**Output**:
```
Diagramma inserito: [tipo] ([N] nodi)
```

**Procedi immediatamente** (oneshot attivo):

1. Salva: diagramma_inserito = True (scratchpad)
2. Esegui subito Fase 4

---

# Fase 4: Pitch + Status

**Input**: Pagina Notion pubblicata

## Step 4.1: Genera pitch

**Regole**:
- Lunghezza: 170-200 parole esatte
- Modalit√†:
  - Singola: Cos'√® + Perch√© importante + Come gestire
  - Comparativa: Cosa distingue + Quando A vs B
- Stile: CCI, frasi 12-15 parole
- **UNA frase in grassetto** (mossa decisiva): usa **testo** per grassetto Markdown

**Validazione interna**: se <170 o >200 parole ‚Üí autocorreggi a ~185 parole

## Step 4.2: Update properties

Usa `notion-update-page`:
```json
{
  "page_id": "[page_id]",
  "command": "update_properties",
  "properties": {
    "Pitch": "[testo normale **testo grassetto** resto testo]",
    "Status argomento": "Attivo"
  }
}
```

Critical: Notion mantiene il grassetto ** ** nella property text Pitch

**Output**:
```
Pitch inserito: [N] parole | Status: Attivo
```

**Procedi immediatamente** (oneshot attivo):

1. Salva: pitch_inserito = True (scratchpad)
2. Esegui subito Fase 5

---

# Fase 5: Complessit√† + Tempo studio

**Input**: Pagina Notion pubblicata con contenuto completo

## Step 5.1: Valutazione automatica

**Complessit√†** (score):
- Struttura: H2 (1pt), H3 (0.5pt), Domande (0.5pt)
- Contenuto: Callout (0.5pt)
- Calcolo score totale

Score:
- 0-2: Semplice
- 3-4: Media
- ‚â•5: Complessa

**Tempo studio**:
```
Tempo = (H2 √ó 2.5) + (H3 √ó 1.5) + (Callout √ó 1) + (Domande √ó 0.5)
Arrotonda a multiplo 5
```

## Step 5.2: Update properties

Usa `notion-update-page`:
```json
{
  "page_id": "[page_id]",
  "command": "update_properties",
  "properties": {
    "Complessit√†": "[Semplice/Media/Complessa]",
    "Tempo studio stimato": [numero]
  }
}
```

**Output**:
```
Complessit√†: [valore] | Tempo stimato: [N] min
```

**Output finale Gruppo A**:
```
Gruppo A completato - Contenuto studiabile

Notion page: [URL]
‚îú‚îÄ Contenuto: [N] parole (CCI: PASS)
‚îú‚îÄ Callout: [N] (red:[N] | blue:[N] | green:[N])
‚îú‚îÄ Diagramma: [tipo] ([N] nodi)
‚îú‚îÄ Pitch: [N] parole
‚îú‚îÄ Status: Attivo
‚îî‚îÄ Tempo stimato: [N] min (complessit√†: [valore])

‚Üí Digita 'continua' per Anki o 'ferma' per terminare
```

**[Pausa A]**

STOP QUI. Attendi comando utente: "continua" o "ferma".

NON eseguire automaticamente la Fase 6. Oneshot mode disattivato fino a "continua".

---

# Fase 6: Anki deck

**[Esegui solo dopo comando "continua"]**

Se l'utente ha digitato "continua", procedi con questa fase.
Se l'utente ha digitato "ferma", NON eseguire questa fase.

**Input**: Pagina Notion pubblicata

**Regole critical**:
- Numero: max 25 carte CORE
- Formato: SOLO cloze c1 (mai c2, c3, c4)
- Atomicit√†: 1 concetto/card
- High-yield: essenziali only

**Anti-confusori** (pattern sistematici):
1. Et√†/popolazione: "nel *neonato*" vs "nell'*adulto* >65 anni"
2. Temporalit√†: "fase *acuta* (<72h)" vs "fase *cronica* (>3 mesi)"
3. Gravit√†/tipo: "asma *intermittente*" vs "asma *persistente grave*"
4. Localizzazione: "ictus *emisfero dominante*"
5. Contesto clinico: "in *assenza insufficienza renale*"

**Esempi buone carte**:
```
La principale causa di cecit√† nel diabete tipo 2 √® {{c1::retinopatia diabetica}}.

Nel diabete tipo 2 senza insufficienza renale, il farmaco di prima linea √® {{c1::metformina}}.
```

**Output file**:

Genera file `anki_deck.txt` nel progetto:
```
[Stem con {{c1::risposta}}]
[Stem con {{c1::risposta}}]
[...max 25 linee]
```

**Output chat**:
```
File generato: anki_deck.txt ([N] carte CORE)
```

**Output finale Gruppo B**:
```
Gruppo B completato - Anki pronto

File: anki_deck.txt
‚îú‚îÄ Carte CORE: [N]/25
‚îî‚îÄ Anti-confusori: applicati

‚Üí Digita 'continua' per propriet√† DB o 'ferma' per terminare
```

**[Pausa B]**

STOP QUI. Attendi comando utente: "continua" o "ferma".

NON eseguire automaticamente la Fase 7. Oneshot mode disattivato fino a "continua".

---

# Fase 7: Propriet√† Voci

**[Esegui solo dopo comando "continua"]**

Se l'utente ha digitato "continua", procedi con questa fase.
Se l'utente ha digitato "ferma", NON eseguire questa fase.

**Input**: Pagina Notion pubblicata

## Step 7.1: Estrazione termini

Estrai 2-3 termini per categoria:
- Eziologia: cause/categorie patogenetiche
- Clinica: sintomi/segni iconici
- Diagnosi: criteri gold standard
- Terapia: farmaci/interventi prima linea

## Step 7.2: Batch processing DB Voci

**Database Voci**:
- ID: `290282519c2c801ea214d30b803c78f8`
- Data Source: `collection://29028251-9c2c-8024-bd71-000bcc303592`
- Property "Categoria": multi_select ["Eziologia", "Clinica", "Diagnosi", "Terapia"]

**Processo**:
1. Per ogni termine: cerca in DB Voci
2. Se non esiste: crea con Categoria appropriata
3. Salva URL
4. Costruisci relazione JSON: `["url1", "url2", ...]`

**Critical - Formato**:
```json
"Voci": "[\"https://notion.so/page1\", \"https://notion.so/page2\"]"
```

## Step 7.3: Update properties

Usa `notion-update-page`:
```json
{
  "page_id": "[page_id]",
  "command": "update_properties",
  "properties": {
    "Voci": "[\"url1\", \"url2\", ...]"
  }
}
```

**Output finale Gruppo C**:
```
Gruppo C completato - Database aggiornato

Propriet√† Voci: [N] termini
‚îú‚îÄ Eziologia: [N]
‚îú‚îÄ Clinica: [N]
‚îú‚îÄ Diagnosi: [N]
‚îî‚îÄ Terapia: [N]

Workflow completato.

‚Üí Vuoi creare link automatici con argomenti correlati? Digita 'continua'
```

---

# Fase 8: Link automatici (opzionale)

**[Esegui solo dopo esplicito "continua" da Gruppo C]**

Se l'utente ha digitato "continua", procedi con questa fase.
Altrimenti workflow terminato.

**Input**: Argomento con propriet√† complete

## Step 8.1: Ricerca candidati

Usa `notion-search` su database Argomenti:
- Filtra: `Argomento primario = YES`
- Escludi: argomento corrente

## Step 8.2: Calcolo match score

Per ogni candidato:
```python
score = 0
matches = {}

voci_corrente = get_voci(argomento_corrente)
voci_candidato = get_voci(argomento_candidato)

for cat in ["Eziologia", "Clinica", "Diagnosi", "Terapia"]:
    termini_corrente = set([v.Name for v in voci_corrente if cat in v.Categoria])
    termini_candidato = set([v.Name for v in voci_candidato if cat in v.Categoria])

    overlap = termini_corrente & termini_candidato
    if overlap:
        score += len(overlap)
        matches[cat] = list(overlap)

# Soglia: score >= 2
```

## Step 8.3: Creazione pagine collegamento

Per ogni match con score ‚â•2:

Crea pagina collegamento nel DB Argomenti:
```json
{
  "parent_database_id": "1b528251-9c2c-8080-bc5e-000bc6ea8d0e",
  "title": "[Argomento A] ‚Üî [Argomento B]",
  "icon": "üîó",
  "properties": {
    "Argomento primario": false,
    "Link score": [score],
    "Matches": "[categoria: termini, ...]"
  }
}
```

Contenuto pagina:
```
# Collegamento [Argomento A] ‚Üî [Argomento B]

Score: [N] | Match trovati:
- Eziologia: [termini]
- Clinica: [termini]
- Diagnosi: [termini]
- Terapia: [termini]

## [Argomento A]
[Link alla pagina A]

## [Argomento B]
[Link alla pagina B]

## Perch√© collegarli?
[Breve spiegazione del legame basato sui match]
```

**Output**:
```
Link creati: [N] collegamenti (score ‚â•2)
```

---

# Retry logic

**API errors**:
- Timeout: retry 3x con backoff (1s, 2s, 4s)
- Rate limit 429: pausa 1s, retry 3x
- Server error 500+: retry 2x con backoff 2s
- Network error: retry 3x con backoff 1s

**Rate limiting**: 350ms tra chiamate consecutive

---

# Limiti cognitivi

| Elemento | Range | Rationale |
|----------|-------|-----------|
| **Callout** | **5-7** | Working memory capacity aumentata |
| **Pilastri H2** | 4-6 | Optimal chunking |
| **Domande** | 5-7 | Spaced retrieval |
| **Anki CORE** | max 25 | High-yield essentials only |
| **Paragrafi** | 2-4 frasi | Readability |
| **Frasi** | ‚â§18 parole | Sentence complexity (threshold rigido) |
| **Pitch** | 170-200 parole | Elevator pitch standard |
| **Diagramma nodi** | ‚â§11 | Visual clarity |

---

**Checkpoint v4.6**: Orchestrator riorganizzato in 3 gruppi.

Modifiche critiche da v4.5.8:
- Riorganizzato: 3 gruppi (A: Contenuto, B: Anki, C: Database)
- Rinumerato: 8 fasi totali (5+1+1+1 opzionale)
- Spostato: Complessit√† + Tempo da Fase 6 a nuova Fase 5 (fine Gruppo A)
- Separato: Status+Tempo (Gruppo A) da Voci (Gruppo C)
- Pulito: output elegante (no CAPS, no === spam)
- Minimizzato: solo output richiesto + info breve
- Mantenuto: tutto il dettaglio tecnico e validazione

Fix v4.5.1 (istruzioni operative):
- Istruzioni operative esplicite per oneshot (esegui subito, non fermarti)
- Stop qui esplicito alle pause obbligatorie

Fix v4.5.2 (generazione Notion):
- Rimosso: conversioni markdown ‚Üí Notion
- Semplificato: Fase 2 genera direttamente in formato Notion
- Fix: Status argomento = "Attivo" (non "In corso")

Fix v4.5.3 (pitch semplificato):
- Rimosso: rich_text con grassetto (causava problemi)
- Semplificato: Pitch come text semplice
- Property: "Pitch": "[testo]" (no array, no annotations)

Fix v4.5.4 (callout + linee vuote):
- Tentativo errato: rimosso <span> completamente (causava perdita colore testo)
- Fix: NO linee vuote dopo headers H3

Fix v4.5.5 (callout HTML):
- Tentativo errato: usato <span style="color:red"> (formato HTML non Notion)

Fix v4.5.6 (formato Notion ufficiale):
- Fix: <span color="red"> (Notion-flavored Markdown ufficiale)
- Basato su Enhanced Markdown Specification Notion
- Grassetto nei callout: **testo** (Markdown standard)
- Pitch con grassetto: "testo **grassetto** resto" (Notion mantiene **)

Fix v4.5.7 (critical - toggle e indentazione):
- Fix critical: ‚ñ∂## invece di >## (era quote, non toggle!)
- Fix critical: TAB invece di spazi (Enhanced Spec: "Use tabs for indentation")
- Esempio completo struttura con formato corretto
- Questo fix risolve: tutto in quote, headers rotti, indentazione sbagliata

Fix v4.5.8 (auto-start + H3 + callout grassetto):
- Ripristinato: auto-start workflow completo quando caricata solo sbobina
- Fix: H3 indentazione corretta (1 TAB prima di ‚ñ∂### per nesting in H2)
- Fix: Callout grassetto su keyword specifiche (NO titoli standard tipo "**Fatto high-yield**:")
- Esempi corretti: "in **gravidanza**", "valore **>200 mg/dL**", "**paradosso** dello spessore"
- Esempi sbagliati: "**Avvertenza**: testo", "**High-yield**: fatto"

Fix v4.6 (riorganizzazione 3 gruppi + interfaccia):
- Riorganizzato: workflow in 3 gruppi logici (A/B/C) con pause strategiche
- Gruppo A: Traccia, Pagina+Callout, Diagramma, Pitch+Status, Complessit√†+Tempo
- Gruppo B: Anki deck
- Gruppo C: Propriet√† Voci (linking DB)
- Opzionale: Link automatici
- Pulito: interfaccia elegante (no CAPS eccetto sigle, no === spam)
- Output minimale: solo risultato + info breve
- Timing ottimizzato: ~45-60 min totale
