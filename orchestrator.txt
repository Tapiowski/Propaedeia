# ORCHESTRATOR - Sistema Studio Medicina (v4.5 Optimized)

> **Nota**: Questo orchestrator usa automaticamente le Custom Instructions del progetto:
> - **CCI**: main message first, frasi <=18 parole, numeri con unità, voce attiva
> - **Vincoli fonte**: SOLO file progetto per contenuti clinici
> - **Stile**: italiano medico standard, NO meta-frasi
> - **Limiti cognitivi**: Callout 5-7, H2 4-6, Domande 5-7, Anki max 25
> - **Validazione incrementale**: auto-check CCI INTERNO dopo ogni H2

---

## COMANDI DISPONIBILI

```
workflow completo  # 7 fasi (~50-60 min) [AUTO fino a pitch]
essenziale        # Solo fasi 1-2 (traccia + pagina Notion)
continua          # Procedi a blocco successivo (dopo pause)
ferma             # Stop workflow
status            # Mostra stato scratchpad
```

**Parametri opzionali**:
```
n=30              # Override limite Anki
focus=diagnosi    # Restringe scope
mode=comparativo  # Forza confronto A vs B
```

---

# SCRATCHPAD - STATO WORKFLOW

**Sistema di Tracking** (memoria interna, non stampare):

```python
workflow_state = {
    "workflow_type": "",      # "completo" | "essenziale"
    "fase_corrente": "",      # fase in esecuzione
    "fasi_completate": [],    # fasi completate

    "outputs": {
        "titolo_argomento": "",
        "traccia_h2": [],
        "notion_page_id": "",
        "notion_published": False,
        "callout_count": 0,
        "diagramma_inserito": False,
        "pitch_inserito": False,
        "anki_deck_path": "",
        "proprieta": {
            "eziologia": [],
            "clinica": [],
            "diagnosi": [],
            "terapia": [],
            "complessita": "",
            "tempo_studio": 0
        }
    },

    "validation": {
        "cci_checks_passed": True,
        "pitch_word_count": 0,
        "frasi_lunghe_percentuale": 0
    }
}
```

**Aggiornamento dopo fase**:
- Salva output in scratchpad
- Aggiungi fase a `fasi_completate`
- Auto-avanza a successiva (se oneshot attivo)

---

# WORKFLOW COMPLETO

**Comando**: `workflow completo`

**BLOCCO 1 - AUTOMATICO** (fasi 1-4, ~30-40 min):
```
1. TRACCIA (5-10 min)
   Output chat: Struttura H2/H3

2. PAGINA NOTION + CALLOUT (15-25 min)
   - Genera pagina in MEMORIA con validazione CCI interna
   - Genera e inserisci 5-7 callout automaticamente
   - Converti markdown → Notion format
   - Pubblica DIRETTAMENTE su Notion
   Output chat: "Pagina pubblicata (N parole, CCI: PASS, Callout: N)"

3. DIAGRAMMA MERMAID (2-3 min)
   - Genera diagramma in memoria
   - Inseriscilo su Notion (append blocks)
   Output chat: "Diagramma inserito ([tipo], N nodi)"

4. PITCH RICH TEXT (2-3 min)
   - Genera pitch con grassetto
   - Update property rich_text (mantiene formattazione)
   Output chat: "Pitch inserito (N parole)"

[PAUSA OBBLIGATORIA 1]
Output: "Pagina studiabile. Digita 'continua' per Anki o 'ferma'"
```

**BLOCCO 2 - ANKI** (fase 5, ~5-8 min, dopo "continua"):
```
5. FILE ANKI (5-8 min)
   - Genera anki_deck.txt (max 25 carte CORE)
   Output chat: "File anki_deck.txt generato (N carte)"

[PAUSA OBBLIGATORIA 2]
Output: "Anki pronto. Digita 'continua' per proprietà o 'ferma'"
```

**BLOCCO 3 - PROPRIETÀ** (fase 6, ~3-5 min, dopo "continua"):
```
6. PROPRIETÀ DB (3-5 min)
   - Estrazione termini (2-3 per categoria)
   - Calcolo Complessità e Tempo studio
   - Batch processing DB Voci
   - Update properties Notion
   Output chat: "Proprietà aggiornate"

[PAUSA OBBLIGATORIA 3]
Output: "DB aggiornato. Digita 'continua' per link (opzionale) o 'ferma'"
```

**BLOCCO 4 - LINK** (fase 7, ~3-5 min, opzionale dopo "continua"):
```
7. LINK AUTOMATICI (3-5 min)
   - Ricerca argomenti correlati (score >=2)
   - Creazione pagine collegamento
   Output chat: "Collegamenti creati: N"
```

---

# FASE 1: TRACCIA

**Input**: Sbobina PDF/MD

**Regole**:
- Scope macro: copri TUTTO proporzionalmente
- Se `focus=X`: zoom su sezione
- H2 range: 4-6 pilastri

**Output**: Stampa SOLO traccia markdown

```markdown
# [Titolo Argomento]

## [H2 Pilastro 1]
-> Note sviluppo: [guida cosa includere]

### [H3 Sottopunto 1.1] (opzionale)
-> [Breve nota]

## [H2 Pilastro 2]
-> [...]

[...4-6 H2 totali]
```

**Post-output**:
- Salva titolo e lista H2 in scratchpad
- Auto-avanza a Fase 2 (oneshot)

---

# FASE 2: PAGINA NOTION + CALLOUT (generazione diretta)

**Input**: Traccia approvata

**CRITICAL**: Genera pagina DIRETTAMENTE su Notion (no output lungo in chat)

## Step 2.1: Generazione Pagina in Memoria

**Regole CCI**:
- Main message first (1-2 frasi chiave per H2)
- Frasi <=18 parole (threshold rigido)
- Paragrafi 2-4 frasi
- Numeri con unità
- Voce attiva

**Struttura** (markdown semplice in memoria):
- Usa esattamente H2/H3 della traccia
- Headers STANDARD: `## Titolo`, `### Sottotitolo`
- Domande integrate: 5-7 totali, formato `**Domanda clinica?**`

**Validazione CCI INTERNA** (dopo ogni H2):

```python
# Genera H2 content
h2_content = genera_h2_content(traccia_h2)

# Valida INTERNAMENTE (no output chat)
frasi = split_sentences(h2_content)
frasi_lunghe = [f for f in frasi if word_count(f) > 18]
percentuale_lunghe = len(frasi_lunghe) / len(frasi) * 100

# Log interno (opzionale, minimo)
print(f"[H2.{n}] Frasi: {len(frasi)}, >18: {len(frasi_lunghe)} ({percentuale_lunghe:.1f}%)")

# Autocorreggi SE necessario
if percentuale_lunghe > 20:  # >20% frasi lunghe
    h2_content = autocorreggi_frasi_lunghe(h2_content)
    print(f"[H2.{n}] Autocorretto")

# Salva in memoria
pagina_markdown += h2_content
```

**Sviluppo Contenuto**:

Patologia: Definizione + epidemio → Fisiopat → Clinica → Diagnosi + DD → Terapia → Prognosi

Farmaco: Classe + meccanismo → Indicazioni → Farmacocinetica → Effetti avversi → Controindicazioni

Procedura: Indicazioni → Preparazione → Steps → Complicanze → Criteri successo

## Step 2.2: Generazione e Inserimento Callout (5-7 automatici)

**CRITICAL**: Callout inseriti AUTOMATICAMENTE durante generazione

**Regole**:
- Numero: **5-7 totali** (limiti cognitivi aggiornati)
- Distribuzione: 1-2 per H2
- Priorità:
  1. Controindicazioni assolute / salvavita
  2. Red flags diagnostiche critiche
  3. Errori comuni da evitare
  4. Meccanismi fisiopatologici chiave
  5. Differenze diagnostiche cruciali (se comparativo)

**Sistema Classificazione** (formato markdown temporaneo):

```markdown
**[!] AVVERTENZA**: [testo critico sicurezza]

**[i] PRINCIPIO**: [meccanismo fisiopatologico]

**[*] HIGH-YIELD**: [fatto nozionistico chiave]
```

**Processo Interno**:
```python
# Dopo generazione pagina completa
callout_list = genera_callout_automatici(pagina_markdown, n=5-7)

# Per ogni callout
for callout in callout_list:
    # Identifica H2 destinazione
    h2_target = identifica_h2_per_callout(callout)

    # Inserisci in posizione appropriata
    pagina_markdown = insert_callout_after_h2(pagina_markdown, h2_target, callout)

# Salva count
workflow_state["outputs"]["callout_count"] = len(callout_list)
```

## Step 2.3: Conversione Markdown → Notion Format

**Conversioni automatiche**:

1. **Toggle headers**: `## Titolo` → `>## Titolo`, `### Titolo` → `>### Titolo`

2. **Indentazione**:
   - Contenuto sotto H2: aggiungi 2 spazi iniziali a ogni riga
   - Contenuto sotto H3: aggiungi 4 spazi iniziali a ogni riga

3. **Callout format**:
   ```python
   # AVVERTENZA
   "**[!] AVVERTENZA**: [testo]" →
   '''  <callout icon="/icons/warning_red.svg" color="red_bg">
     <span color="red">[testo]</span>
     </callout>'''

   # PRINCIPIO
   "**[i] PRINCIPIO**: [testo]" →
   '''  <callout icon="/icons/light-bulb_blue.svg" color="blue_bg">
     <span color="blue">[testo]</span>
     </callout>'''

   # HIGH-YIELD
   "**[*] HIGH-YIELD**: [testo]" →
   '''  <callout icon="/icons/star_green.svg" color="green_bg">
     <span color="green">[testo]</span>
     </callout>'''
   ```

## Step 2.4: Ricerca Pagina Esistente

Usa `notion-search`:
```json
{
  "query": "[titolo argomento]",
  "query_type": "internal",
  "data_source_url": "collection://1b528251-9c2c-8065-a61e-000bfdfab7c7"
}
```

## Step 2.5: Pubblicazione Diretta

Usa `notion-update-page`:
```json
{
  "page_id": "[ID]",
  "command": "replace_content",
  "new_str": "[pagina_notion_format con callout]"
}
```

**Output** (messaggio conciso):
```
Pagina pubblicata: [URL]
Parole: [N] | CCI: PASS (frasi >18: X%) | Callout: [N] (RED:[N] | BLUE:[N] | GREEN:[N])
```

**Post-output**:
- Salva page_id in scratchpad
- Marca `notion_published = True`
- Auto-avanza a Fase 3 (oneshot)

---

# FASE 3: DIAGRAMMA MERMAID (append su Notion)

**Input**: Pagina Notion pubblicata

**CRITICAL**: Inserisci diagramma DIRETTAMENTE su Notion (no conversione markdown)

## Step 3.1: Generazione Diagramma in Memoria

**Tipo** (auto-select):
- Flowchart: algoritmi diagnostici/terapeutici
- Timeline: decorso patologia
- Mindmap: collegamenti fisiopatologici

**Limiti**:
- Nodi: <=11
- Label: <=4 parole/nodo

**Palette MedGraph**:
- Sfondo: #FFFFFF
- Testo/linee: #000000
- Accento: #00E0CC (solo step critico)
- Contrasto: >=4.5:1

**Template Base**:
```mermaid
%%{init: {
  "theme": "base",
  "themeVariables": {
    "fontFamily": "ui-sans-serif, system-ui, sans-serif",
    "fontSize": "16px",
    "primaryColor": "#FFFFFF",
    "primaryBorderColor": "#000000",
    "primaryTextColor": "#000000",
    "lineColor": "#000000"
  }
}}%%
flowchart TB
  classDef normal fill:#FFFFFF,stroke:#000000,stroke-width:1.2px,color:#000000;
  classDef accent fill:#00E0CC,stroke:#00E0CC,stroke-width:1.8px,color:#000000;
  classDef dashed stroke-dasharray:4 2,stroke:#000000,fill:#FFFFFF;

  A((Start)):::normal --> B[Processo]:::normal
  B --> C{Decisione?}:::normal
  C -- Si --> D[Step critico]:::accent
  C -- No --> E[Follow-up]:::dashed
```

## Step 3.2: Inserimento su Notion (append blocks)

**Posizione**: Prima di "## Perle del professore" o alla fine

Usa `notion-append-block` o `notion-insert-block`:
```json
{
  "page_id": "[page_id]",
  "block_type": "code",
  "code": {
    "language": "mermaid",
    "rich_text": [{"text": {"content": "[codice_mermaid]"}}]
  }
}
```

**Output** (messaggio conciso):
```
Diagramma inserito: [tipo] (N nodi)
```

**Post-output**:
- Marca `diagramma_inserito = True`
- Auto-avanza a Fase 4 (oneshot)

---

# FASE 4: PITCH RICH TEXT (con grassetto formattato)

**Input**: Pagina Notion pubblicata

**CRITICAL**: Pitch come rich_text per mantenere grassetto

## Step 4.1: Generazione Pitch in Memoria

**Regole**:
- Lunghezza: 170-200 parole esatte
- Modalità:
  - Singola: Cos'è + Perché importante + Come gestire
  - Comparativa: Cosa distingue + Quando A vs B
- **UNA frase in grassetto** (mossa decisiva)

**Stile**: CCI, frasi 12-15 parole

**Validazione interna**:
```python
pitch_text = genera_pitch(pagina_content)
word_count = count_words(pitch_text)

# Valida range
if word_count < 170 or word_count > 200:
    pitch_text = autocorreggi_pitch_length(pitch_text, target=185)

# Identifica frase grassetto
bold_sentence = identifica_frase_grassetto(pitch_text)
```

## Step 4.2: Conversione a Rich Text con Grassetto

**Formato Notion API**:
```python
# Split pitch in parti: pre-bold, bold, post-bold
parts = split_pitch_with_bold(pitch_text)

rich_text_array = [
    {"text": {"content": parts["pre"]}},
    {"text": {"content": parts["bold"]}, "annotations": {"bold": True}},
    {"text": {"content": parts["post"]}}
]
```

## Step 4.3: Update Property

Usa `notion-update-page`:
```json
{
  "page_id": "[page_id]",
  "command": "update_properties",
  "properties": {
    "Pitch": {
      "rich_text": [
        {"text": {"content": "testo normale "}},
        {"text": {"content": "testo grassetto"}, "annotations": {"bold": true}},
        {"text": {"content": " resto testo."}}
      ]
    },
    "Status argomento": "In corso"
  }
}
```

**Output** (messaggio conciso):
```
Pitch inserito: [N] parole (PASS)
```

**Output completo BLOCCO 1**:
```
===========================================
    BLOCCO 1 COMPLETATO
===========================================

CONTENUTO STUDIABILE:
- Pagina Notion: [N] parole (CCI: PASS)
- Callout: [N] (RED:[N] | BLUE:[N] | GREEN:[N])
- Diagramma: [tipo] ([N] nodi)
- Pitch: [N] parole

PROSSIMO STEP:
Fase 5: File Anki (~5-8 min)

Digita 'continua' per Anki o 'ferma' per terminare
```

**[PAUSA OBBLIGATORIA 1]** Attendi comando utente.

**Post-output**:
- Marca `pitch_inserito = True`
- Salva word_count in scratchpad

---

# FASE 5: FILE ANKI

**[Esegui SOLO dopo comando "continua"]**

**Input**: Pagina Notion pubblicata

**Regole CRITICAL**:
- Numero: max 25 carte CORE
- Formato: SOLO cloze c1 (mai c2, c3, c4)
- Atomicità: 1 concetto/card
- High-yield: essenziali only

**Anti-confusori** (pattern sistematici):
1. Età/popolazione: "nel *neonato*" vs "nell'*adulto* >65 anni"
2. Temporalità: "fase *acuta* (<72h)" vs "fase *cronica* (>3 mesi)"
3. Gravità/tipo: "asma *intermittente*" vs "asma *persistente grave*"
4. Localizzazione: "ictus *emisfero dominante*"
5. Contesto clinico: "in *assenza insufficienza renale*"

**Esempi Buone Carte**:
```
La principale causa di cecità nel diabete tipo 2 è {{c1::retinopatia diabetica}}.

Nel diabete tipo 2 senza insufficienza renale, il farmaco di prima linea è {{c1::metformina}}.
```

**Output FILE**:

Genera file `anki_deck.txt` nel progetto:
```
[Stem con {{c1::risposta}}]
[Stem con {{c1::risposta}}]
[...max 25 linee]
```

**Comunicazione chat**:
```
File anki_deck.txt generato (N carte CORE)
```

**Output completo BLOCCO 2**:
```
===========================================
    BLOCCO 2 COMPLETATO
===========================================

ANKI PRONTO:
- File: anki_deck.txt
- Carte: [N] CORE
- Anti-confusori: applicati

PROSSIMO STEP:
Fase 6: Proprietà DB (~3-5 min)

Digita 'continua' per proprietà o 'ferma' per terminare
```

**[PAUSA OBBLIGATORIA 2]** Attendi comando utente.

**Post-output**:
- Salva path in scratchpad

---

# FASE 6: PROPRIETÀ DB

**[Esegui SOLO dopo comando "continua"]**

**Input**: Pagina Notion pubblicata

## 6a. Estrazione Termini

Estrai 2-3 termini per categoria:
- Eziologia: cause/categorie patogenetiche
- Clinica: sintomi/segni iconici
- Diagnosi: criteri gold standard
- Terapia: farmaci/interventi prima linea

**Output**:
```
Eziologia: [termine1, termine2, termine3]
Clinica: [termine1, termine2, termine3]
Diagnosi: [termine1, termine2, termine3]
Terapia: [termine1, termine2, termine3]
```

## 6b. Valutazione Automatica

**Complessità** (score):
- Struttura: H2 (1pt), H3 (0.5pt), Domande (0.5pt)
- Contenuto: Callout (0.5pt)
- Terminologia: termini totali / 3

Score:
- 0-2: Semplice
- 3-4: Media
- >=5: Complessa

**Tempo Studio**:
```
Tempo = (H2 × 2.5) + (H3 × 1.5) + (Callout × 1) + (Domande × 0.5)
Arrotonda a multiplo 5
```

**Output**:
```
Complessità: [Semplice/Media/Complessa]
Tempo studio: [N] minuti
```

## 6c. Batch Processing DB Voci

**Database Voci**:
- ID: `290282519c2c801ea214d30b803c78f8`
- Data Source: `collection://29028251-9c2c-8024-bd71-000bcc303592`
- Property "Categoria": multi_select ["Eziologia", "Clinica", "Diagnosi", "Terapia"]

**Processo**:
1. Per ogni termine: cerca in DB Voci
2. Se non esiste: crea con Categoria appropriata
3. Salva URL
4. Costruisci relazione JSON: `["url1", "url2", ...]`

**CRITICAL - Formato**:
```json
"Voci": "[\"https://notion.so/page1\", \"https://notion.so/page2\"]"
```

## 6d. Update Properties

Usa `notion-update-page`:
```json
{
  "page_id": "[page_id]",
  "command": "update_properties",
  "properties": {
    "Voci": "[\"url1\", \"url2\", ...]",
    "Complessità": "[Semplice/Media/Complessa]",
    "Tempo studio stimato": [numero]
  }
}
```

**Output completo BLOCCO 3**:
```
===========================================
    BLOCCO 3 COMPLETATO
===========================================

PROPERTIES DB:
- Voci: [N] termini (Ez:[N] | Cl:[N] | Dg:[N] | Tx:[N])
- Complessità: [valore]
- Tempo studio: [N] min

PROSSIMO STEP (opzionale):
Fase 7: Link automatici (~3-5 min)

Digita 'continua' per link o 'ferma' per terminare
```

**[PAUSA OBBLIGATORIA 3]** Attendi comando utente.

---

# FASE 7: LINK AUTOMATICI

**[Esegui SOLO dopo comando "continua"]**

**Input**: Argomento con proprietà complete

## 7a. Ricerca Candidati

Usa `notion-search` su database Argomenti:
- Filtra: `Argomento primario = YES`
- Escludi: argomento corrente

## 7b. Calcolo Match Score

Per ogni candidato:
```python
score = 0
matches = {}

voci_corrente = get_voci(argomento_corrente)
voci_candidato = get_voci(argomento_candidato)

for cat in ["Eziologia", "Clinica", "Diagnosi", "Terapia"]:
    termini_corrente = set([v.Name for v in voci_corrente if cat in v.Categoria])
    termini_candidato = set([v.Name for v in voci_candidato if cat in v.Categoria])

    overlap = termini_corrente & termini_candidato
    if overlap:
        score += len(overlap)
        matches[cat] = list(overlap)

# Soglia: score >= 2
```

## 7c. Output Proposta

```
LINK: Argomenti correlati trovati

1. [Argomento 1] - Score: 5
   - Eziologia: termine1, termine2
   - Clinica: termine3

2. [Argomento 2] - Score: 3
   - Diagnosi: termine1, termine2

Crea tutti? [si/no]
```

## 7d. Creazione Link

Per ogni candidato score >=2:

1. Crea pagina collegamento
2. Content:
```markdown
# Link Clinico: [ArgCorrente] - [Candidato]

## Termini Comuni

Eziologia: [lista]
Clinica: [lista]
Diagnosi: [lista]
Terapia: [lista]

## Note
Match score: [N]
```
3. Update relazione bidirezionale "Argomenti correlati"

**Output finale**:
```
Collegamenti creati: [N]

===========================================
    WORKFLOW COMPLETATO
===========================================

RIEPILOGO:
- Pagina: [URL]
- Parole: [N] (CCI: PASS)
- Callout: [N]
- Diagramma: [tipo]
- Pitch: [N] parole
- Anki: [N] carte
- Voci: [N] termini
- Link: [N] argomenti

Tempo totale: [N] min
===========================================
```

---

## WORKFLOW ESSENZIALE

**Comando**: `essenziale`

**Fasi**: Solo 1-2 (traccia + pagina Notion con callout)
**Tempo**: 20-30 min
**Output**: Pagina Notion studiabile con callout

---

## DATABASE NOTION

### Argomenti
- ID: `1b5282519c2c80a68c37ce5e4bd56f22`
- Data Source: `collection://1b528251-9c2c-8065-a61e-000bfdfab7c7`

Properties:
- Nome (title)
- Pitch (rich_text) ← CRITICAL: mantiene grassetto
- Voci (relation → Voci)
- Complessità (select): Semplice | Media | Complessa
- Tempo studio stimato (number)
- Argomento primario (checkbox)
- Status argomento (select)
- Argomenti correlati (relation → Argomenti)

### Voci
- ID: `290282519c2c801ea214d30b803c78f8`
- Data Source: `collection://29028251-9c2c-8024-bd71-000bcc303592`

Properties:
- Name (title)
- Categoria (multi_select): ["Eziologia", "Clinica", "Diagnosi", "Terapia"]
- Argomento (relation → Argomenti)

---

## RETRY LOGIC

**API Errors**:
- Timeout: retry 3x con backoff (1s, 2s, 4s)
- Rate limit 429: pausa 1s, retry 3x
- Server error 500+: retry 2x con backoff 2s
- Network error: retry 3x con backoff 1s

**Rate Limiting**: 350ms tra chiamate consecutive

---

## LIMITI COGNITIVI AGGIORNATI

| Elemento | Range | Rationale |
|----------|-------|-----------|
| **Callout** | **5-7** | Working memory capacity aumentata |
| **Pilastri H2** | 4-6 | Optimal chunking |
| **Domande** | 5-7 | Spaced retrieval |
| **Anki CORE** | max 25 | High-yield essentials only |
| **Paragrafi** | 2-4 frasi | Readability |
| **Frasi** | ≤18 parole | Sentence complexity (threshold rigido) |
| **Pitch** | 170-200 parole | Elevator pitch standard |
| **Diagramma nodi** | ≤11 | Visual clarity |

---

**CHECKPOINT v4.5**: Orchestrator ottimizzato.

Modifiche critiche da v4.4:
- SEMPLIFICATO: 7 fasi (da 9)
- OTTIMIZZATO: generazione diretta su Notion (no output lungo in chat)
- AGGIUNTO: validazione CCI interna in memoria
- COMBINATO: Fase 2 = pagina + callout in un solo step
- AGGIUNTO: pitch rich_text con grassetto formattato
- AGGIUNTO: diagramma append blocks direttamente su Notion
- AGGIORNATO: callout 5-7 (da 3-5)
- RIDOTTO: tempo totale ~50-60 min (da ~55-65 min)
- MANTENUTO: pause obbligatorie dopo fasi chiave
- MANTENUTO: scratchpad system
