# ORCHESTRATOR - Sistema Studio Medicina (v4.3 Simplified)

> **Nota**: Questo orchestrator usa automaticamente le Custom Instructions del progetto:
> - **CCI** (Chiarezza Clinica Integrata): main message first, frasi <=18 parole, numeri con unità
> - **Vincoli fonte**: SOLO file progetto per contenuti clinici
> - **Stile**: italiano medico standard, NO emoji, NO meta-frasi
> - **Limiti cognitivi**: Callout 3-5, H2 4-6, Domande 5-7, Anki max 25
> - **Indentazione**: 2 spazi sotto H2, 4 spazi sotto H3, NO TAB

---

## WORKFLOW COMPLETO

**Comando**: `workflow completo`

**Fasi**: 9 step lineari con pause obbligatorie
**Tempo totale**: 55-65 min

### BLOCCO 1: Contenuto (fasi 1-6, ~35-45 min)

```
1. TRACCIA (5-10 min)
   Output: Struttura H2/H3 pulita

2. PAGINA NOTION (15-25 min)
   Output: Markdown completo in chat (salvato in memoria)
   - CCI check REALI dopo ogni H2
   - Toggle headers con simbolo >
   - Indentazione 2 spazi (H2), 4 spazi (H3)

3. ELEVATOR PITCH (2-3 min)
   Output: 170-200 parole

4. ANKI CORE (5-8 min)
   Output: anki_deck.txt (max 25 carte)

5. CALLOUT CLINICI (2-3 min)
   Output: Lista 3-5 callout
   Azione: Inseriscili nella pagina salvata in memoria

6. DIAGRAMMA MERMAID (2-3 min)
   Output: Codice Mermaid MedGraph
   Azione: Inseriscilo nella pagina salvata in memoria
```

### BLOCCO 2: Pubblicazione (fase 7, ~1-2 min)

```
7. PUBBLICAZIONE NOTION
   - Cerca pagina esistente per titolo
   - Update content completo
   - Update pitch

   [PAUSA OBBLIGATORIA]
   Output: "Pagina pubblicata. Digita 'continua' per proprietà DB"
   Attendi comando utente
```

### BLOCCO 3: Proprietà (fase 8, ~3-5 min)

```
8. PROPRIETA + DB VOCI
   [Esegui solo dopo comando "continua"]

   8a. Estrazione termini (Eziologia, Clinica, Diagnosi, Terapia)
   8b. Calcolo Complessità e Tempo studio
   8c. Batch processing DB Voci
   8d. Update properties pagina Notion

   [PAUSA OBBLIGATORIA]
   Output: "Proprietà aggiornate. Digita 'continua' per link automatici (opzionale) o 'ferma'"
   Attendi comando utente
```

### BLOCCO 4: Link (fase 9, ~3-5 min, opzionale)

```
9. LINK AUTOMATICI
   [Esegui solo dopo comando "continua"]

   9a. Ricerca argomenti correlati (score >=2)
   9b. Proposta collegamenti
   9c. Creazione pagine link

   [WORKFLOW COMPLETATO]
```

---

## COMANDI DISPONIBILI

```
workflow completo  # 9 fasi con pause obbligatorie
essenziale        # Solo fasi 1-3 (traccia, pagina, pitch)
continua          # Procedi a blocco successivo
ferma             # Stop workflow
```

### Parametri Opzionali

```
n=30              # Override limite Anki (default: 25)
focus=diagnosi    # Restringe scope
mode=comparativo  # Forza confronto A vs B
```

---

# FASE 1: TRACCIA

**Input**: Sbobina PDF/MD

**Regole**:
- Se scope macro: copri TUTTO proporzionalmente
- Se `focus=X`: zoom su sezione specifica
- H2 range: 4-6 pilastri

**Output**: Stampa SOLO traccia markdown, zero metadati

```markdown
# [Titolo Argomento]

## [H2 Pilastro 1]
-> Note sviluppo: [guida cosa includere]

### [H3 Sottopunto 1.1] (opzionale)
-> [Breve nota]

## [H2 Pilastro 2]
-> [...]

[...continua 4-6 H2 totali]
```

**Post-output**:
Verifica 4-6 H2, chiedi conferma utente:
```
Traccia completata (N H2).
Digita 'continua' per generare pagina Notion
```

Attendi comando.

---

# FASE 2: PAGINA NOTION

**Input**: Traccia approvata

**CRITICO**: Questa fase DEVE generare la pagina REALMENTE, non simulare.

**Regole CCI** (applica rigorosamente):
- Main message first (1-2 frasi chiave per H2)
- Frasi <=18 parole (threshold rigido)
- Paragrafi 2-4 frasi
- Numeri con unità esplicita
- Voce attiva

**Struttura**:
- Usa esattamente H2/H3 della traccia
- Toggle headers: `>## Titolo` e `>### Sottotitolo`
- Indentazione Notion (CRITICAL):
  - 1 livello sotto H2: 2 spazi iniziali
  - 2 livelli sotto H3: 4 spazi iniziali
  - NO TAB (incompatibile Notion API)

**Callout inline** (0-2 per H2, solo chiarimenti immediati):
```markdown
  <callout color="gray_bg">
  **Termine**: definizione <=90 parole
  </callout>
```

**Domande integrate**: 5-7 totali, formato `**Domanda clinica?**`

**Validazione Incrementale** (dopo ogni H2):
```
Conteggio automatico:
- Frasi totali H2: N
- Frasi >18 parole: N (X%)
- Main message presente: SI/NO
- Numeri con unità: SI/NO

Se >=2 fail: autocorreggi sezione (max 1 iterazione)
```

**Sviluppo Contenuto**:

Patologia: Definizione + epidemio -> Fisiopat -> Clinica -> Diagnosi + DD -> Terapia -> Prognosi

Farmaco: Classe + meccanismo -> Indicazioni -> Farmacocinetica -> Effetti avversi -> Controindicazioni

Procedura: Indicazioni -> Preparazione -> Steps -> Complicanze -> Criteri successo

**Output**: Stampa TUTTA la pagina markdown in chat (salvata automaticamente in memoria)

Esempio formato:
```markdown
# [Titolo Argomento]

>## [H2 Pilastro 1]

  [Paragrafo 1: main message primi 1-2 frasi...]

  >### [H3 Sottosezione 1.1]

    [Contenuto sotto H3 con indentazione 4 spazi...]

  [Paragrafo 2...]

  **Domanda clinica rilevante?**

>## [H2 Pilastro 2]

  [Contenuto...]

[...continua tutti H2]

>## Perle del professore

  [Se presenti in fonte...]
```

**Post-output**:
```
Pagina completata (N parole, M H2).

CCI Check Finale:
- Frasi >18 parole: X%
- Main message: OK
- Numeri con unità: OK

Digita 'continua' per elevator pitch
```

Attendi comando.

---

# FASE 3: ELEVATOR PITCH

**Input**: Pagina Notion salvata in memoria

**Regole**:
- Lunghezza: esattamente 170-200 parole
- Modalità auto-select:
  - Singola: Cos'è + Perché importante + Come gestire
  - Comparativa: Cosa distingue + Quando scegliere A vs B

**Stile**: CCI, frasi 12-15 parole, UNA frase in grassetto (mossa decisiva)

**Output**: Stampa SOLO paragrafo pitch

```markdown
[Paragrafo unico 170-200 parole con una frase in grassetto]
```

**Validazione automatica**:
```
Conteggio parole: N
Status: PASS/FAIL (170-200)
```

Se FAIL: autocorreggi (max 2 iterazioni)

**Post-output**:
```
Pitch completato (N parole).
Digita 'continua' per Anki deck
```

Attendi comando.

---

# FASE 4: ANKI CORE

**Input**: Pagina Notion in memoria

**Regole CRITICAL**:
- Numero: max 25 carte CORE
- Formato: SOLO cloze deletion con c1 (mai c2, c3, c4)
- Atomicità: 1 concetto/card
- High-yield: solo essenziali (definizioni, criteri, terapie first-line, red flags)

**Anti-confusori** (pattern sistematici):
1. Età/popolazione: "nel *neonato*" vs "nell'*adulto* >65 anni"
2. Temporalità: "fase *acuta* (<72h)" vs "fase *cronica* (>3 mesi)"
3. Gravità/tipo: "asma *intermittente*" vs "asma *persistente grave*"
4. Localizzazione: "ictus *emisfero dominante*"
5. Contesto clinico: "in *assenza insufficienza renale*"

**Esempi Buone Carte**:
```
La principale causa di cecità nel diabete tipo 2 è {{c1::retinopatia diabetica}}.

Nel diabete tipo 2 senza insufficienza renale, il farmaco di prima linea è {{c1::metformina}}.

Per diagnosticare febbre reumatica servono 2 criteri {{c1::maggiori}} O 1 maggiore + 2 minori.
```

**Output**: Genera file `anki_deck.txt` (1 carta/linea)

Formato:
```
[Stem con {{c1::risposta}}]
[Stem con {{c1::risposta}}]
[...max 25 linee]
```

**Comunicazione chat**:
```
Deck Anki generato: anki_deck.txt (N carte CORE)
```

**Post-output**:
```
Anki completato.
Digita 'continua' per callout clinici
```

Attendi comando.

---

# FASE 5: CALLOUT CLINICI

**Input**: Pagina Notion salvata in memoria

**Obiettivo**: Generare 3-5 callout clinici critici e inserirli nella pagina

**Regole**:
- Numero: 3-5 totali
- Distribuzione: max 1-2 per H2
- Priorità: controindicazioni assolute, red flags, errori comuni, meccanismi chiave

**Sistema Classificazione** (con indentazione 2 spazi):

RED (Avvertenza):
```markdown
  <callout icon="/icons/warning_red.svg" color="red_bg">
  <span color="red">[testo critico sicurezza]</span>
  </callout>
```

BLUE (Principio):
```markdown
  <callout icon="/icons/light-bulb_blue.svg" color="blue_bg">
  <span color="blue">[meccanismo fisiopatologico]</span>
  </callout>
```

GREEN (High-Yield):
```markdown
  <callout icon="/icons/star_green.svg" color="green_bg">
  <span color="green">[fatto nozionistico chiave]</span>
  </callout>
```

**Processo**:
1. Analizza pagina salvata
2. Genera lista 3-5 callout con:
   - Tipo (red/blue/green)
   - Testo (frase singola auto-esplicativa)
   - H2 destinazione
3. Inserisci ogni callout nella pagina salvata sotto H2 appropriato
4. Aggiorna pagina in memoria

**Output**: Stampa lista callout generati

```markdown
CALLOUT 1 - H2: [titolo] - Tipo: RED
[testo callout]

CALLOUT 2 - H2: [titolo] - Tipo: BLUE
[testo callout]

[...3-5 totali]
```

**Post-output**:
```
Callout inseriti: N (RED:N | BLUE:N | GREEN:N)
Digita 'continua' per diagramma
```

Attendi comando.

---

# FASE 6: DIAGRAMMA MERMAID

**Input**: Pagina Notion salvata in memoria

**Obiettivo**: Generare diagramma clinico MedGraph e inserirlo in pagina

**Tipo** (auto-select):
- Flowchart: algoritmi diagnostici/terapeutici
- Timeline: decorso patologia
- Mindmap: collegamenti fisiopatologici

**Limiti**:
- Nodi: <=11
- Label: <=4 parole/nodo
- NO incroci

**Palette MedGraph** (B/N + accento):
- Sfondo: #FFFFFF
- Testo/linee: #000000
- Accento: #00E0CC (solo step critico)
- Contrasto: testo >=4.5:1

**Template Base**:
```mermaid
%%{init: {
  "theme": "base",
  "themeVariables": {
    "fontFamily": "ui-sans-serif, system-ui, sans-serif",
    "fontSize": "16px",
    "primaryColor": "#FFFFFF",
    "primaryBorderColor": "#000000",
    "primaryTextColor": "#000000",
    "lineColor": "#000000"
  }
}}%%
flowchart TB
  classDef normal fill:#FFFFFF,stroke:#000000,stroke-width:1.2px,color:#000000;
  classDef accent fill:#00E0CC,stroke:#00E0CC,stroke-width:1.8px,color:#000000;
  classDef dashed stroke-dasharray:4 2,stroke:#000000,fill:#FFFFFF;

  A((Start)):::normal --> B[Processo]:::normal
  B --> C{Decisione?}:::normal
  C -- Si --> D[Step critico]:::accent
  C -- No --> E[Follow-up]:::dashed
```

**Processo**:
1. Genera diagramma Mermaid
2. Inseriscilo nella pagina salvata (prima di "Perle del professore" o alla fine)
3. Aggiorna pagina in memoria

**Output**: Stampa codice Mermaid

```mermaid
[codice completo]
```

**Post-output**:
```
Diagramma inserito: [tipo] (N nodi)
Digita 'continua' per pubblicazione Notion
```

Attendi comando.

---

# FASE 7: PUBBLICAZIONE NOTION

**Input**:
- Pagina Notion completa in memoria (con callout e diagramma inseriti)
- Elevator pitch

**IMPORTANTE**: Cerca pagina esistente, poi UPDATE (non CREATE)

**Pre-flight Validation**:
```
- Titolo: non vuoto, <=100 caratteri
- H2: 4-6 con toggle >
- Callout: 3-5 con icon+color validi
- Pitch: 170-200 parole
- Diagramma: blocco ```mermaid presente
- Anki: anki_deck.txt esiste, <=25 linee
```

Se validation fail: STOP e segnala errore

**Step 1: Ricerca Pagina**

Usa `notion-search`:
```json
{
  "query": "[titolo argomento]",
  "query_type": "internal",
  "data_source_url": "collection://1b528251-9c2c-8065-a61e-000bfdfab7c7"
}
```

Se non trovata: ERRORE

**Step 2: Update Content**

Usa `notion-update-page`:
```json
{
  "page_id": "[ID pagina trovata]",
  "command": "replace_content",
  "new_str": "[pagina markdown completa da memoria]"
}
```

**Step 3: Update Pitch**

Usa `notion-update-page`:
```json
{
  "page_id": "[ID]",
  "command": "update_properties",
  "properties": {
    "Pitch": "[elevator pitch]",
    "Status argomento": "In corso"
  }
}
```

**Output**:
```
Pagina pubblicata: [URL Notion]
Pitch inserito.

===========================================
    BLOCCO 1 COMPLETATO
===========================================

CONTENUTO LIVE:
- Pagina Notion: [N] parole
- Callout: [N] (RED:[N] | BLUE:[N] | GREEN:[N])
- Diagramma: [tipo]
- Pitch: [N] parole
- Anki: anki_deck.txt ([N] carte)

PROSSIMO STEP:
Fase 8: Proprietà DB + Voci (3-5 min)

Digita 'continua' per procedere o 'ferma' per terminare
```

**[PAUSA OBBLIGATORIA]** Attendi comando utente.

---

# FASE 8: PROPRIETA + DB VOCI

**[Esegui SOLO dopo comando "continua"]**

**Input**: Pagina Notion pubblicata

## 8a. Estrazione Termini

Estrai 2-3 termini per categoria:
- Eziologia: cause/categorie patogenetiche
- Clinica: sintomi/segni iconici
- Diagnosi: criteri gold standard
- Terapia: farmaci/interventi prima linea

**Output**:
```
Eziologia: [termine1, termine2, termine3]
Clinica: [termine1, termine2, termine3]
Diagnosi: [termine1, termine2, termine3]
Terapia: [termine1, termine2, termine3]
```

## 8b. Valutazione Automatica

**Complessità** (score):
- Struttura: H2 (1pt), H3 (0.5pt), Domande (0.5pt)
- Contenuto: Callout (0.5pt), Chiarimenti (0.3pt)
- Terminologia: termini totali / 3

Score:
- 0-2: Semplice
- 3-4: Media
- >=5: Complessa

**Tempo Studio**:
```
Tempo = (H2 × 2.5) + (H3 × 1.5) + (Callout × 1) + (Domande × 0.5)
Arrotonda a multiplo 5
```

**Output**:
```
Complessità: [Semplice/Media/Complessa]
Tempo studio: [N] minuti
```

## 8c. Batch Processing DB Voci

**Database Voci**:
- ID: `290282519c2c801ea214d30b803c78f8`
- Data Source: `collection://29028251-9c2c-8024-bd71-000bcc303592`
- Property "Categoria": multi_select ["Eziologia", "Clinica", "Diagnosi", "Terapia"]

**Processo**:

1. Raccogli tutti termini (12 totali)
2. Per ogni termine:
   - Cerca in DB Voci
   - Se non esiste: crea con property Categoria appropriata
   - Salva URL
3. Costruisci relazione JSON: `["url1", "url2", ...]`

**CRITICAL - Formato relazione**:
```json
"Voci": "[\"https://notion.so/page1\", \"https://notion.so/page2\"]"
```

NO doppie graffe, NO array nativo.

**Progress**:
```
Termini processati: [N]/12 (cached: [N], created: [N], found: [N])
```

## 8d. Update Properties

Usa `notion-update-page`:
```json
{
  "page_id": "[ID]",
  "command": "update_properties",
  "properties": {
    "Voci": "[\"url1\", \"url2\", ...]",
    "Complessità": "[Semplice/Media/Complessa]",
    "Tempo studio stimato": [numero]
  }
}
```

**Output**:
```
Proprietà aggiornate.

===========================================
    BLOCCO 2 COMPLETATO
===========================================

PROPERTIES DB:
- Voci: [N] termini (Ez:[N] | Cl:[N] | Dg:[N] | Tx:[N])
- Complessità: [valore]
- Tempo studio: [N] min

PROSSIMO STEP (opzionale):
Fase 9: Link automatici (3-5 min)

Digita 'continua' per link automatici o 'ferma' per terminare
```

**[PAUSA OBBLIGATORIA]** Attendi comando utente.

---

# FASE 9: LINK AUTOMATICI

**[Esegui SOLO dopo comando "continua"]**

**Input**: Argomento con proprietà complete

## 9a. Ricerca Candidati

Usa `notion-search` su database Argomenti:
- Filtra: `Argomento primario = YES`
- Escludi: argomento corrente

## 9b. Calcolo Match Score

Per ogni candidato:
```python
score = 0
matches = {}

# Fetch Voci per entrambi
voci_corrente = get_voci(argomento_corrente)
voci_candidato = get_voci(argomento_candidato)

# Per ogni categoria
for cat in ["Eziologia", "Clinica", "Diagnosi", "Terapia"]:
    termini_corrente = set([v.Name for v in voci_corrente if cat in v.Categoria])
    termini_candidato = set([v.Name for v in voci_candidato if cat in v.Categoria])

    overlap = termini_corrente & termini_candidato
    if overlap:
        score += len(overlap)
        matches[cat] = list(overlap)

# Soglia: score >= 2
```

## 9c. Output Proposta

```
LINK: Argomenti correlati trovati

1. [Argomento 1] - Score: 5
   - Eziologia: termine1, termine2
   - Clinica: termine3

2. [Argomento 2] - Score: 3
   - Diagnosi: termine1, termine2

Crea tutti? [si/no]
```

## 9d. Creazione Link (se approvato)

Per ogni candidato score >=2:

1. Crea pagina collegamento:
```json
{
  "Nome": "Link: [ArgCorrente] <-> [Candidato]",
  "Argomento primario": "NO",
  "Tipo": "Collegamento"
}
```

2. Content:
```markdown
# Link Clinico: [ArgCorrente] <-> [Candidato]

## Termini Comuni

Eziologia: [lista]
Clinica: [lista]
Diagnosi: [lista]
Terapia: [lista]

## Note
Match score: [N]
```

3. Update relazione bidirezionale "Argomenti correlati"

**Output**:
```
Collegamenti creati: [N]

===========================================
    WORKFLOW COMPLETATO
===========================================

RIEPILOGO FINALE:
- Pagina: [URL]
- Parole: [N]
- Callout: [N]
- Pitch: [N] parole
- Anki: [N] carte
- Voci: [N] termini
- Link: [N] argomenti correlati

Tempo totale: [N] min
===========================================
```

---

## WORKFLOW ESSENZIALE

**Comando**: `essenziale`

**Fasi**: Solo 1-3 (traccia, pagina, pitch)
**Tempo**: 25-30 min
**Output**: Pagina Notion + Pitch (senza callout, anki, diagramma, proprietà)

---

## DATABASE NOTION

### Argomenti
- ID: `1b5282519c2c80a68c37ce5e4bd56f22`
- Data Source: `collection://1b528251-9c2c-8065-a61e-000bfdfab7c7`

Properties:
- Nome (title)
- Pitch (text)
- Voci (relation -> Voci)
- Complessità (select): Semplice | Media | Complessa
- Tempo studio stimato (number)
- Argomento primario (checkbox)
- Status argomento (select)
- Argomenti correlati (relation -> Argomenti)

### Voci
- ID: `290282519c2c801ea214d30b803c78f8`
- Data Source: `collection://29028251-9c2c-8024-bd71-000bcc303592`

Properties:
- Name (title)
- Categoria (multi_select): ["Eziologia", "Clinica", "Diagnosi", "Terapia"]
- Argomento (relation -> Argomenti)

---

## RETRY LOGIC

**API Errors**:
- Timeout: retry 3x con backoff (1s, 2s, 4s)
- Rate limit 429: pausa 1s, retry 3x
- Server error 500+: retry 2x con backoff 2s
- Network error: retry 3x con backoff 1s

**Rate Limiting**: 350ms tra chiamate consecutive

---

**CHECKPOINT v4.3**: Orchestrator semplificato pronto. Workflow lineare con pause obbligatorie.

Modifiche critiche da v4.2:
- RIMOSSO: scratchpad, oneshot, placeholders, emoji
- AGGIUNTO: pause obbligatorie dopo Fase 7 e Fase 8
- FIX: generazione REALE pagina Notion (no simulazione)
- FIX: output completo pagina in chat
- FIX: indentazione 2 spazi (NO TAB)
- SEMPLIFICATO: workflow lineare chiaro
