# ORCHESTRATOR - Sistema Studio Medicina (v4.4 Fixed)

> **Nota**: Questo orchestrator usa automaticamente le Custom Instructions del progetto:
> - **CCI**: main message first, frasi <=18 parole, numeri con unità, voce attiva
> - **Vincoli fonte**: SOLO file progetto per contenuti clinici
> - **Stile**: italiano medico standard, NO meta-frasi
> - **Limiti cognitivi**: Callout 3-5, H2 4-6, Domande 5-7, Anki max 25
> - **Validazione incrementale**: auto-check CCI dopo ogni H2

---

## COMANDI DISPONIBILI

```
workflow completo  # 9 fasi (~55-65 min) [AUTO fino a pubblicazione]
essenziale        # Solo fasi 1-3 (traccia, pagina, pitch)
continua          # Procedi a blocco successivo (dopo pause)
ferma             # Stop workflow
status            # Mostra stato scratchpad
```

**Parametri opzionali**:
```
n=30              # Override limite Anki
focus=diagnosi    # Restringe scope
mode=comparativo  # Forza confronto A vs B
```

---

# SCRATCHPAD - STATO WORKFLOW

**Sistema di Tracking** (memoria interna, non stampare):

```python
workflow_state = {
    "workflow_type": "",      # "completo" | "essenziale"
    "fase_corrente": "",      # fase in esecuzione
    "fasi_completate": [],    # fasi completate

    "outputs": {
        "titolo_argomento": "",
        "traccia_h2": [],
        "pagina_markdown_semplice": "",    # Markdown SEMPLICE (## Titolo)
        "elevator_pitch": "",
        "anki_deck_path": "",
        "callout_inseriti": False,
        "diagramma_inserito": False,
        "pagina_notion_format": "",        # Convertita per Notion (>## Titolo)
        "notion_page_id": "",
        "notion_published": False,
        "proprieta": {
            "eziologia": [],
            "clinica": [],
            "diagnosi": [],
            "terapia": [],
            "complessita": "",
            "tempo_studio": 0
        }
    },

    "validation": {
        "cci_checks_passed": True,
        "pitch_word_count": 0
    }
}
```

**Aggiornamento dopo fase**:
- Salva output in scratchpad
- Aggiungi fase a `fasi_completate`
- Auto-avanza a successiva (se oneshot attivo)

---

# WORKFLOW COMPLETO

**Comando**: `workflow completo`

**BLOCCO 1 - AUTOMATICO** (fasi 1-7, ~35-45 min):
```
1. TRACCIA (5-10 min)
   Output: Struttura H2/H3 in chat

2. PAGINA MARKDOWN (15-25 min)
   Output: TUTTA la pagina in chat (markdown SEMPLICE)
   Salva: in memoria per fasi successive

3. ELEVATOR PITCH (2-3 min)
   Output: 170-200 parole in chat

4. ANKI CORE (5-8 min)
   Genera: FILE anki_deck.txt (max 25 carte)
   Output: "File anki_deck.txt generato"

5. CALLOUT CLINICI (2-3 min)
   Output: Lista 3-5 callout in chat
   Azione: Inseriscili in pagina markdown salvata

6. DIAGRAMMA MERMAID (2-3 min)
   Output: Codice Mermaid in chat
   Azione: Inseriscilo in pagina markdown salvata

7. CONVERSIONE + PUBBLICAZIONE (1-2 min)
   7a. Converti markdown semplice → formato Notion
   7b. Update content pagina Notion
   7c. Update pitch

[PAUSA OBBLIGATORIA]
Output: "Pagina pubblicata. Digita 'continua' per proprietà o 'ferma'"
```

**BLOCCO 2 - PROPRIETÀ** (fase 8, ~3-5 min, dopo "continua"):
```
8. PROPRIETÀ + DB VOCI
   8a. Estrazione termini (2-3 per categoria)
   8b. Calcolo Complessità e Tempo studio
   8c. Batch processing DB Voci
   8d. Update properties Notion

[PAUSA OBBLIGATORIA]
Output: "Proprietà aggiornate. Digita 'continua' per link o 'ferma'"
```

**BLOCCO 3 - LINK** (fase 9, ~3-5 min, opzionale dopo "continua"):
```
9. LINK AUTOMATICI
   9a. Ricerca argomenti correlati
   9b. Proposta collegamenti (score >=2)
   9c. Creazione pagine link
```

---

# FASE 1: TRACCIA

**Input**: Sbobina PDF/MD

**Regole**:
- Scope macro: copri TUTTO proporzionalmente
- Se `focus=X`: zoom su sezione
- H2 range: 4-6 pilastri

**Output**: Stampa SOLO traccia markdown

```markdown
# [Titolo Argomento]

## [H2 Pilastro 1]
-> Note sviluppo: [guida cosa includere]

### [H3 Sottopunto 1.1] (opzionale)
-> [Breve nota]

## [H2 Pilastro 2]
-> [...]

[...4-6 H2 totali]
```

**Post-output**:
- Salva titolo e lista H2 in scratchpad
- Auto-avanza a Fase 2 (oneshot)

---

# FASE 2: PAGINA MARKDOWN SEMPLICE

**Input**: Traccia approvata

**CRITICAL**: Genera markdown NORMALE, NON formato Notion

**Regole CCI**:
- Main message first (1-2 frasi chiave per H2)
- Frasi <=18 parole (threshold rigido)
- Paragrafi 2-4 frasi
- Numeri con unità
- Voce attiva

**Struttura**:
- Usa esattamente H2/H3 della traccia
- Headers STANDARD: `## Titolo` e `### Sottotitolo` (NO `>`)
- NO indentazione speciale
- NO placeholder

**Callout inline** (0-2 per H2, solo chiarimenti immediati):
```markdown
**[Termine]**: [definizione <=90 parole]
```

**Domande integrate**: 5-7 totali, formato `**Domanda clinica?**`

**Validazione Incrementale** (dopo ogni H2):
Conta automaticamente:
- Frasi totali H2: N
- Frasi >18 parole: N (X%)
- Main message: SI/NO
- Numeri con unità: SI/NO

Se >=2 fail: autocorreggi sezione (max 1 iterazione)

**Sviluppo Contenuto**:

Patologia: Definizione + epidemio → Fisiopat → Clinica → Diagnosi + DD → Terapia → Prognosi

Farmaco: Classe + meccanismo → Indicazioni → Farmacocinetica → Effetti avversi → Controindicazioni

Procedura: Indicazioni → Preparazione → Steps → Complicanze → Criteri successo

**Formato Output** (markdown SEMPLICE):

```markdown
# [Titolo Argomento]

## [H2 Pilastro 1]

[Paragrafo 1: main message primi 1-2 frasi...]

### [H3 Sottosezione 1.1]

[Contenuto sotto H3...]

[Paragrafo 2...]

**Domanda clinica rilevante?**

## [H2 Pilastro 2]

[Contenuto...]

[...continua tutti H2]

## Perle del professore

[Se presenti in fonte...]
```

**Output**: Stampa TUTTA la pagina markdown in chat

**Post-output**:
- Salva in `workflow_state["outputs"]["pagina_markdown_semplice"]`
- CCI Quick Check finale (frasi >18 parole: X%)
- Auto-avanza a Fase 3 (oneshot)

---

# FASE 3: ELEVATOR PITCH

**Input**: Pagina salvata

**Regole**:
- Lunghezza: 170-200 parole esatte
- Modalità:
  - Singola: Cos'è + Perché importante + Come gestire
  - Comparativa: Cosa distingue + Quando A vs B

**Stile**: CCI, frasi 12-15 parole, UNA frase in grassetto

**Output**: Stampa SOLO paragrafo pitch

```markdown
[Paragrafo unico 170-200 parole con una frase in grassetto]
```

**Validazione**:
```
Conteggio parole: N
Status: PASS/FAIL
```

Se FAIL: autocorreggi (max 2 iterazioni)

**Post-output**:
- Salva in scratchpad
- Auto-avanza a Fase 4 (oneshot)

---

# FASE 4: ANKI CORE

**Input**: Pagina salvata

**Regole CRITICAL**:
- Numero: max 25 carte CORE
- Formato: SOLO cloze c1 (mai c2, c3, c4)
- Atomicità: 1 concetto/card
- High-yield: essenziali only

**Anti-confusori** (pattern sistematici):
1. Età/popolazione: "nel *neonato*" vs "nell'*adulto* >65 anni"
2. Temporalità: "fase *acuta* (<72h)" vs "fase *cronica* (>3 mesi)"
3. Gravità/tipo: "asma *intermittente*" vs "asma *persistente grave*"
4. Localizzazione: "ictus *emisfero dominante*"
5. Contesto clinico: "in *assenza insufficienza renale*"

**Esempi Buone Carte**:
```
La principale causa di cecità nel diabete tipo 2 è {{c1::retinopatia diabetica}}.

Nel diabete tipo 2 senza insufficienza renale, il farmaco di prima linea è {{c1::metformina}}.
```

**CRITICAL - Output FILE**:

Genera file `anki_deck.txt` nel progetto con formato:
```
[Stem con {{c1::risposta}}]
[Stem con {{c1::risposta}}]
[...max 25 linee]
```

**Comunicazione chat** (NO output carte):
```
File anki_deck.txt generato (N carte CORE)
```

**Post-output**:
- Salva path in scratchpad
- Auto-avanza a Fase 5 (oneshot)

---

# FASE 5: CALLOUT CLINICI

**Input**: Pagina markdown semplice salvata

**Regole**:
- Numero: 3-5 totali
- Distribuzione: max 1-2 per H2
- Priorità: controindicazioni assolute, red flags, errori comuni, meccanismi chiave

**Sistema Classificazione**:

RED (Avvertenza):
```markdown
**[!] AVVERTENZA**: [testo critico sicurezza]
```

BLUE (Principio):
```markdown
**[i] PRINCIPIO**: [meccanismo fisiopatologico]
```

GREEN (High-Yield):
```markdown
**[*] HIGH-YIELD**: [fatto nozionistico chiave]
```

**Processo**:
1. Analizza pagina salvata
2. Genera lista 3-5 callout
3. Inserisci ogni callout nella pagina markdown sotto H2 appropriato
4. Aggiorna `workflow_state["outputs"]["pagina_markdown_semplice"]`

**Output**: Stampa lista callout generati

```markdown
CALLOUT 1 - H2: [titolo] - Tipo: RED
[testo callout]

CALLOUT 2 - H2: [titolo] - Tipo: BLUE
[testo callout]

[...3-5 totali]
```

**Post-output**:
- Marca `callout_inseriti = True` in scratchpad
- Auto-avanza a Fase 6 (oneshot)

---

# FASE 6: DIAGRAMMA MERMAID

**Input**: Pagina markdown semplice salvata

**Tipo** (auto-select):
- Flowchart: algoritmi diagnostici/terapeutici
- Timeline: decorso patologia
- Mindmap: collegamenti fisiopatologici

**Limiti**:
- Nodi: <=11
- Label: <=4 parole/nodo

**Palette MedGraph**:
- Sfondo: #FFFFFF
- Testo/linee: #000000
- Accento: #00E0CC (solo step critico)
- Contrasto: >=4.5:1

**Template Base**:
```mermaid
%%{init: {
  "theme": "base",
  "themeVariables": {
    "fontFamily": "ui-sans-serif, system-ui, sans-serif",
    "fontSize": "16px",
    "primaryColor": "#FFFFFF",
    "primaryBorderColor": "#000000",
    "primaryTextColor": "#000000",
    "lineColor": "#000000"
  }
}}%%
flowchart TB
  classDef normal fill:#FFFFFF,stroke:#000000,stroke-width:1.2px,color:#000000;
  classDef accent fill:#00E0CC,stroke:#00E0CC,stroke-width:1.8px,color:#000000;
  classDef dashed stroke-dasharray:4 2,stroke:#000000,fill:#FFFFFF;

  A((Start)):::normal --> B[Processo]:::normal
  B --> C{Decisione?}:::normal
  C -- Si --> D[Step critico]:::accent
  C -- No --> E[Follow-up]:::dashed
```

**Processo**:
1. Genera diagramma Mermaid
2. Inseriscilo in pagina markdown (prima "Perle del professore" o fine)
3. Aggiorna `workflow_state["outputs"]["pagina_markdown_semplice"]`

**Output**: Stampa codice Mermaid completo

**Post-output**:
- Marca `diagramma_inserito = True` in scratchpad
- Auto-avanza a Fase 7 (oneshot)

---

# FASE 7: CONVERSIONE + PUBBLICAZIONE

**Input**:
- Pagina markdown semplice completa (con callout e diagramma)
- Elevator pitch

**STEP 7a: CONVERSIONE Markdown → Notion**

Converti `pagina_markdown_semplice` in formato Notion:

1. **Toggle headers**: `## Titolo` → `>## Titolo`, `### Titolo` → `>### Titolo`

2. **Indentazione**:
   - Contenuto sotto H2: aggiungi 2 spazi iniziali a ogni riga
   - Contenuto sotto H3: aggiungi 4 spazi iniziali a ogni riga

3. **Callout format**:
   - `**[!] AVVERTENZA**: [testo]` →
     ```markdown
       <callout icon="/icons/warning_red.svg" color="red_bg">
       <span color="red">[testo]</span>
       </callout>
     ```
   - `**[i] PRINCIPIO**: [testo]` →
     ```markdown
       <callout icon="/icons/light-bulb_blue.svg" color="blue_bg">
       <span color="blue">[testo]</span>
       </callout>
     ```
   - `**[*] HIGH-YIELD**: [testo]` →
     ```markdown
       <callout icon="/icons/star_green.svg" color="green_bg">
       <span color="green">[testo]</span>
       </callout>
     ```

Salva risultato in `workflow_state["outputs"]["pagina_notion_format"]`

**STEP 7b: RICERCA PAGINA**

Usa `notion-search`:
```json
{
  "query": "[titolo argomento]",
  "query_type": "internal",
  "data_source_url": "collection://1b528251-9c2c-8065-a61e-000bfdfab7c7"
}
```

**STEP 7c: UPDATE CONTENT**

Usa `notion-update-page`:
```json
{
  "page_id": "[ID]",
  "command": "replace_content",
  "new_str": "[pagina_notion_format]"
}
```

**STEP 7d: UPDATE PITCH**

Usa `notion-update-page`:
```json
{
  "page_id": "[ID]",
  "command": "update_properties",
  "properties": {
    "Pitch": "[elevator_pitch]",
    "Status argomento": "In corso"
  }
}
```

**Output**:
```
Pagina pubblicata: [URL Notion]
Pitch inserito.

===========================================
    BLOCCO 1 COMPLETATO
===========================================

CONTENUTO LIVE:
- Pagina Notion: [N] parole
- Callout: [N] (RED:[N] | BLUE:[N] | GREEN:[N])
- Diagramma: [tipo]
- Pitch: [N] parole
- Anki: anki_deck.txt ([N] carte)

PROSSIMO STEP:
Fase 8: Proprietà DB + Voci (~3-5 min)

Digita 'continua' per procedere o 'ferma' per terminare
```

**[PAUSA OBBLIGATORIA]** Attendi comando utente.

---

# FASE 8: PROPRIETÀ + DB VOCI

**[Esegui SOLO dopo comando "continua"]**

## 8a. Estrazione Termini

Estrai 2-3 termini per categoria:
- Eziologia: cause/categorie patogenetiche
- Clinica: sintomi/segni iconici
- Diagnosi: criteri gold standard
- Terapia: farmaci/interventi prima linea

**Output**:
```
Eziologia: [termine1, termine2, termine3]
Clinica: [termine1, termine2, termine3]
Diagnosi: [termine1, termine2, termine3]
Terapia: [termine1, termine2, termine3]
```

## 8b. Valutazione Automatica

**Complessità** (score):
- Struttura: H2 (1pt), H3 (0.5pt), Domande (0.5pt)
- Contenuto: Callout (0.5pt)
- Terminologia: termini totali / 3

Score:
- 0-2: Semplice
- 3-4: Media
- >=5: Complessa

**Tempo Studio**:
```
Tempo = (H2 × 2.5) + (H3 × 1.5) + (Callout × 1) + (Domande × 0.5)
Arrotonda a multiplo 5
```

**Output**:
```
Complessità: [Semplice/Media/Complessa]
Tempo studio: [N] minuti
```

## 8c. Batch Processing DB Voci

**Database Voci**:
- ID: `290282519c2c801ea214d30b803c78f8`
- Data Source: `collection://29028251-9c2c-8024-bd71-000bcc303592`
- Property "Categoria": multi_select ["Eziologia", "Clinica", "Diagnosi", "Terapia"]

**Processo**:
1. Per ogni termine: cerca in DB Voci
2. Se non esiste: crea con Categoria appropriata
3. Salva URL
4. Costruisci relazione JSON: `["url1", "url2", ...]`

**CRITICAL - Formato**:
```json
"Voci": "[\"https://notion.so/page1\", \"https://notion.so/page2\"]"
```

## 8d. Update Properties

Usa `notion-update-page`:
```json
{
  "page_id": "[ID]",
  "command": "update_properties",
  "properties": {
    "Voci": "[\"url1\", \"url2\", ...]",
    "Complessità": "[Semplice/Media/Complessa]",
    "Tempo studio stimato": [numero]
  }
}
```

**Output**:
```
Proprietà aggiornate.

===========================================
    BLOCCO 2 COMPLETATO
===========================================

PROPERTIES DB:
- Voci: [N] termini (Ez:[N] | Cl:[N] | Dg:[N] | Tx:[N])
- Complessità: [valore]
- Tempo studio: [N] min

PROSSIMO STEP (opzionale):
Fase 9: Link automatici (~3-5 min)

Digita 'continua' per link o 'ferma' per terminare
```

**[PAUSA OBBLIGATORIA]** Attendi comando utente.

---

# FASE 9: LINK AUTOMATICI

**[Esegui SOLO dopo comando "continua"]**

## 9a. Ricerca Candidati

Usa `notion-search` su database Argomenti:
- Filtra: `Argomento primario = YES`
- Escludi: argomento corrente

## 9b. Calcolo Match Score

Per ogni candidato:
```python
score = 0
matches = {}

voci_corrente = get_voci(argomento_corrente)
voci_candidato = get_voci(argomento_candidato)

for cat in ["Eziologia", "Clinica", "Diagnosi", "Terapia"]:
    termini_corrente = set([v.Name for v in voci_corrente if cat in v.Categoria])
    termini_candidato = set([v.Name for v in voci_candidato if cat in v.Categoria])

    overlap = termini_corrente & termini_candidato
    if overlap:
        score += len(overlap)
        matches[cat] = list(overlap)

# Soglia: score >= 2
```

## 9c. Output Proposta

```
LINK: Argomenti correlati trovati

1. [Argomento 1] - Score: 5
   - Eziologia: termine1, termine2
   - Clinica: termine3

2. [Argomento 2] - Score: 3
   - Diagnosi: termine1, termine2

Crea tutti? [si/no]
```

## 9d. Creazione Link

Per ogni candidato score >=2:

1. Crea pagina collegamento
2. Content:
```markdown
# Link Clinico: [ArgCorrente] - [Candidato]

## Termini Comuni

Eziologia: [lista]
Clinica: [lista]
Diagnosi: [lista]
Terapia: [lista]

## Note
Match score: [N]
```
3. Update relazione bidirezionale "Argomenti correlati"

**Output**:
```
Collegamenti creati: [N]

===========================================
    WORKFLOW COMPLETATO
===========================================

RIEPILOGO:
- Pagina: [URL]
- Parole: [N]
- Callout: [N]
- Pitch: [N] parole
- Anki: [N] carte
- Voci: [N] termini
- Link: [N] argomenti

Tempo totale: [N] min
===========================================
```

---

## WORKFLOW ESSENZIALE

**Comando**: `essenziale`

**Fasi**: Solo 1-3 (traccia, pagina markdown, pitch)
**Tempo**: 25-30 min
**Output**: Pagina markdown + Pitch (no callout, anki, pubblicazione)

---

## DATABASE NOTION

### Argomenti
- ID: `1b5282519c2c80a68c37ce5e4bd56f22`
- Data Source: `collection://1b528251-9c2c-8065-a61e-000bfdfab7c7`

Properties:
- Nome (title)
- Pitch (text)
- Voci (relation → Voci)
- Complessità (select): Semplice | Media | Complessa
- Tempo studio stimato (number)
- Argomento primario (checkbox)
- Status argomento (select)
- Argomenti correlati (relation → Argomenti)

### Voci
- ID: `290282519c2c801ea214d30b803c78f8`
- Data Source: `collection://29028251-9c2c-8024-bd71-000bcc303592`

Properties:
- Name (title)
- Categoria (multi_select): ["Eziologia", "Clinica", "Diagnosi", "Terapia"]
- Argomento (relation → Argomenti)

---

## RETRY LOGIC

**API Errors**:
- Timeout: retry 3x con backoff (1s, 2s, 4s)
- Rate limit 429: pausa 1s, retry 3x
- Server error 500+: retry 2x con backoff 2s
- Network error: retry 3x con backoff 1s

**Rate Limiting**: 350ms tra chiamate consecutive

---

**CHECKPOINT v4.4**: Orchestrator corretto.

Modifiche critiche da v4.3:
- RIPRISTINATO: scratchpad, oneshot automatico fino a pubblicazione
- FIX CRITICO: Fase 2 genera markdown SEMPLICE (## Titolo, non >##)
- FIX CRITICO: Fase 2 output COMPLETO in chat (tutta la pagina visibile)
- FIX CRITICO: Fase 4 genera FILE anki_deck.txt (non output chat)
- FIX CRITICO: Fase 7 conversione markdown → Notion + pubblicazione
- MANTENUTO: pause obbligatorie dopo Fase 7 e Fase 8
- MANTENUTO: indentazione 2 spazi (H2), 4 spazi (H3)
- RIMOSSO: emoji, metadati superflui
